# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history. See bash(1) for more options
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
shopt -s checkwinsize
# If set, the pattern "**" used in a pathname expansion context will match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
[ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ] && debian_chroot=$(cat /etc/debian_chroot)

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

##### Daniel Cranston's Additions #####

### Environment Variables ###
declare -x PATH=$PATH:$HOME/.bin
declare -x TZ="Pacific/Auckland"

### Aliases, Scripts, Functions ###
alias gitcheck='ssh -T github.com'
alias emacs="emacs -nw"
alias ll='ls -alFh'
alias mckill='pkill -9 -f minecraft_server'
alias sshdax='ssh dax@$(cat ~/.ssh/.daxmacip)'

function lll() { ls -alFh "$@" | less ; }

# Run in Python 2.7, then Python 3
function pyb() {
   clear
   printf '%s' "\$"
   for i in $@; do
      printf '%s' " $i"
   done
   printf '\n\n%s\n' "EXECUTING PYTHON 2.7"
   python2.7 "$@"
   printf '\n%s\n' "EXECUTING PYTHON 3"
   python3 "$@"
}

# Save manpage to a web-accessible .txt
function mansave() {
   declare -x MANWIDTH="80"
   saveFile="$HOME/www/manpages/$1.txt"
   scriptName="mansave"
   if [ -s "$saveFile" ]; then
      printf '%s\n' "$scriptName: save target already exists"
      return 1
   fi
   man "$1" | col -b > "$saveFile"
   manExit=${PIPESTATUS[0]}
   if [ -e "$saveFile" ] && ! [ -s "$saveFile" ]; then
      rm "$saveFile" || return 2
   fi
   [ $manExit != 0 ] && return 1
   return 0
}

# Add SSH keys
function addsshkeys() {
   agentInfo="$HOME/.ssh/.ssh-agent"
   pgrep ssh-agent &> /dev/null
   if [ $? != 0 ] || ! [ -a "$agentInfo" ]; then
      ssh-agent > "$agentInfo"
   fi
   . "$agentInfo" &> /dev/null
   if ( ! ssh-add -l | grep "greyrimu_github_rsa" &> /dev/null ); then
      ssh-add ~/.ssh/greyrimu_github_rsa &> /dev/null
   fi
}

# Tmux: start session if not running; attach
function tma() {
   [ $TMUX ] && return

   session="$USER"

   if  ( ! tmux has -t $session &> /dev/null ); then
      tmux -2 new-session -ds $session > /dev/null
      #tmux send-keys -t $session:0 "mcrun.py greycolander -ok" C-m
      tmux new-window -t $session:1
   fi

   tmux -2 attach-session -t $session > /dev/null
}

### Run ###
if [ -z "$TMUX" ]; then
   addsshkeys
   sleep 2
fi
tma
